// Autogenerated by Thrift Compiler (0.13.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package tracetest

import(
	"bytes"
	"context"
	"reflect"
	"database/sql/driver"
	"errors"
	"fmt"
	"github.com/uber/jaeger-client-go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type Transport int64
const (
  Transport_HTTP Transport = 0
  Transport_TCHANNEL Transport = 1
  Transport_DUMMY Transport = 2
)

func (p Transport) String() string {
  switch p {
  case Transport_HTTP: return "HTTP"
  case Transport_TCHANNEL: return "TCHANNEL"
  case Transport_DUMMY: return "DUMMY"
  }
  return "<UNSET>"
}

func TransportFromString(s string) (Transport, error) {
  switch s {
  case "HTTP": return Transport_HTTP, nil 
  case "TCHANNEL": return Transport_TCHANNEL, nil 
  case "DUMMY": return Transport_DUMMY, nil 
  }
  return Transport(0), fmt.Errorf("not a valid Transport string")
}


func TransportPtr(v Transport) *Transport { return &v }

func (p Transport) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *Transport) UnmarshalText(text []byte) error {
q, err := TransportFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *Transport) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = Transport(v)
return nil
}

func (p * Transport) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ServiceName
//  - ServerRole
//  - Host
//  - Port
//  - Transport
//  - Downstream
type Downstream struct {
  ServiceName string `thrift:"serviceName,1,required" db:"serviceName" json:"serviceName"`
  ServerRole string `thrift:"serverRole,2,required" db:"serverRole" json:"serverRole"`
  Host string `thrift:"host,3,required" db:"host" json:"host"`
  Port string `thrift:"port,4,required" db:"port" json:"port"`
  Transport Transport `thrift:"transport,5,required" db:"transport" json:"transport"`
  Downstream *Downstream `thrift:"downstream,6" db:"downstream" json:"downstream,omitempty"`
}

func NewDownstream() *Downstream {
  return &Downstream{}
}


func (p *Downstream) GetServiceName() string {
  return p.ServiceName
}

func (p *Downstream) GetServerRole() string {
  return p.ServerRole
}

func (p *Downstream) GetHost() string {
  return p.Host
}

func (p *Downstream) GetPort() string {
  return p.Port
}

func (p *Downstream) GetTransport() Transport {
  return p.Transport
}
var Downstream_Downstream_DEFAULT *Downstream
func (p *Downstream) GetDownstream() *Downstream {
  if !p.IsSetDownstream() {
    return Downstream_Downstream_DEFAULT
  }
return p.Downstream
}
func (p *Downstream) IsSetDownstream() bool {
  return p.Downstream != nil
}

func (p *Downstream) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServiceName bool = false;
  var issetServerRole bool = false;
  var issetHost bool = false;
  var issetPort bool = false;
  var issetTransport bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetServiceName = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetServerRole = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetHost = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetPort = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
        issetTransport = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField6(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServiceName{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServiceName is not set"));
  }
  if !issetServerRole{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerRole is not set"));
  }
  if !issetHost{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Host is not set"));
  }
  if !issetPort{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Port is not set"));
  }
  if !issetTransport{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Transport is not set"));
  }
  return nil
}

func (p *Downstream)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServiceName = v
}
  return nil
}

func (p *Downstream)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ServerRole = v
}
  return nil
}

func (p *Downstream)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *Downstream)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Port = v
}
  return nil
}

func (p *Downstream)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  temp := Transport(v)
  p.Transport = temp
}
  return nil
}

func (p *Downstream)  ReadField6(iprot thrift.TProtocol) error {
  p.Downstream = &Downstream{}
  if err := p.Downstream.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Downstream), err)
  }
  return nil
}

func (p *Downstream) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("Downstream"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
    if err := p.writeField6(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *Downstream) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serviceName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err) }
  if err := oprot.WriteString(string(p.ServiceName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err) }
  return err
}

func (p *Downstream) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverRole", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serverRole: ", p), err) }
  if err := oprot.WriteString(string(p.ServerRole)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverRole (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serverRole: ", p), err) }
  return err
}

func (p *Downstream) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("host", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:host: ", p), err) }
  if err := oprot.WriteString(string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:host: ", p), err) }
  return err
}

func (p *Downstream) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("port", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:port: ", p), err) }
  if err := oprot.WriteString(string(p.Port)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.port (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:port: ", p), err) }
  return err
}

func (p *Downstream) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("transport", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transport: ", p), err) }
  if err := oprot.WriteI32(int32(p.Transport)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transport (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transport: ", p), err) }
  return err
}

func (p *Downstream) writeField6(oprot thrift.TProtocol) (err error) {
  if p.IsSetDownstream() {
    if err := oprot.WriteFieldBegin("downstream", thrift.STRUCT, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:downstream: ", p), err) }
    if err := p.Downstream.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Downstream), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:downstream: ", p), err) }
  }
  return err
}

func (p *Downstream) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("Downstream(%+v)", *p)
}

// Attributes:
//  - ServerRole
//  - Sampled
//  - Baggage
//  - Downstream
type StartTraceRequest struct {
  ServerRole string `thrift:"serverRole,1,required" db:"serverRole" json:"serverRole"`
  Sampled bool `thrift:"sampled,2,required" db:"sampled" json:"sampled"`
  Baggage string `thrift:"baggage,3,required" db:"baggage" json:"baggage"`
  Downstream *Downstream `thrift:"downstream,4,required" db:"downstream" json:"downstream"`
}

func NewStartTraceRequest() *StartTraceRequest {
  return &StartTraceRequest{}
}


func (p *StartTraceRequest) GetServerRole() string {
  return p.ServerRole
}

func (p *StartTraceRequest) GetSampled() bool {
  return p.Sampled
}

func (p *StartTraceRequest) GetBaggage() string {
  return p.Baggage
}
var StartTraceRequest_Downstream_DEFAULT *Downstream
func (p *StartTraceRequest) GetDownstream() *Downstream {
  if !p.IsSetDownstream() {
    return StartTraceRequest_Downstream_DEFAULT
  }
return p.Downstream
}
func (p *StartTraceRequest) IsSetDownstream() bool {
  return p.Downstream != nil
}

func (p *StartTraceRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServerRole bool = false;
  var issetSampled bool = false;
  var issetBaggage bool = false;
  var issetDownstream bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetServerRole = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetSampled = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetBaggage = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
        issetDownstream = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServerRole{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerRole is not set"));
  }
  if !issetSampled{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sampled is not set"));
  }
  if !issetBaggage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Baggage is not set"));
  }
  if !issetDownstream{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Downstream is not set"));
  }
  return nil
}

func (p *StartTraceRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServerRole = v
}
  return nil
}

func (p *StartTraceRequest)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sampled = v
}
  return nil
}

func (p *StartTraceRequest)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Baggage = v
}
  return nil
}

func (p *StartTraceRequest)  ReadField4(iprot thrift.TProtocol) error {
  p.Downstream = &Downstream{}
  if err := p.Downstream.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Downstream), err)
  }
  return nil
}

func (p *StartTraceRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("StartTraceRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *StartTraceRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverRole", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverRole: ", p), err) }
  if err := oprot.WriteString(string(p.ServerRole)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverRole (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverRole: ", p), err) }
  return err
}

func (p *StartTraceRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sampled", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampled: ", p), err) }
  if err := oprot.WriteBool(bool(p.Sampled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampled (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampled: ", p), err) }
  return err
}

func (p *StartTraceRequest) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baggage", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:baggage: ", p), err) }
  if err := oprot.WriteString(string(p.Baggage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.baggage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:baggage: ", p), err) }
  return err
}

func (p *StartTraceRequest) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("downstream", thrift.STRUCT, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:downstream: ", p), err) }
  if err := p.Downstream.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Downstream), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:downstream: ", p), err) }
  return err
}

func (p *StartTraceRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("StartTraceRequest(%+v)", *p)
}

// Attributes:
//  - ServerRole
//  - Downstream
type JoinTraceRequest struct {
  ServerRole string `thrift:"serverRole,1,required" db:"serverRole" json:"serverRole"`
  Downstream *Downstream `thrift:"downstream,2" db:"downstream" json:"downstream,omitempty"`
}

func NewJoinTraceRequest() *JoinTraceRequest {
  return &JoinTraceRequest{}
}


func (p *JoinTraceRequest) GetServerRole() string {
  return p.ServerRole
}
var JoinTraceRequest_Downstream_DEFAULT *Downstream
func (p *JoinTraceRequest) GetDownstream() *Downstream {
  if !p.IsSetDownstream() {
    return JoinTraceRequest_Downstream_DEFAULT
  }
return p.Downstream
}
func (p *JoinTraceRequest) IsSetDownstream() bool {
  return p.Downstream != nil
}

func (p *JoinTraceRequest) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetServerRole bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetServerRole = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetServerRole{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ServerRole is not set"));
  }
  return nil
}

func (p *JoinTraceRequest)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServerRole = v
}
  return nil
}

func (p *JoinTraceRequest)  ReadField2(iprot thrift.TProtocol) error {
  p.Downstream = &Downstream{}
  if err := p.Downstream.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Downstream), err)
  }
  return nil
}

func (p *JoinTraceRequest) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("JoinTraceRequest"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *JoinTraceRequest) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("serverRole", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverRole: ", p), err) }
  if err := oprot.WriteString(string(p.ServerRole)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serverRole (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverRole: ", p), err) }
  return err
}

func (p *JoinTraceRequest) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDownstream() {
    if err := oprot.WriteFieldBegin("downstream", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:downstream: ", p), err) }
    if err := p.Downstream.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Downstream), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:downstream: ", p), err) }
  }
  return err
}

func (p *JoinTraceRequest) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("JoinTraceRequest(%+v)", *p)
}

// Attributes:
//  - TraceId
//  - Sampled
//  - Baggage
type ObservedSpan struct {
  TraceId string `thrift:"traceId,1,required" db:"traceId" json:"traceId"`
  Sampled bool `thrift:"sampled,2,required" db:"sampled" json:"sampled"`
  Baggage string `thrift:"baggage,3,required" db:"baggage" json:"baggage"`
}

func NewObservedSpan() *ObservedSpan {
  return &ObservedSpan{}
}


func (p *ObservedSpan) GetTraceId() string {
  return p.TraceId
}

func (p *ObservedSpan) GetSampled() bool {
  return p.Sampled
}

func (p *ObservedSpan) GetBaggage() string {
  return p.Baggage
}
func (p *ObservedSpan) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetTraceId bool = false;
  var issetSampled bool = false;
  var issetBaggage bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
        issetTraceId = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
        issetSampled = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetBaggage = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetTraceId{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field TraceId is not set"));
  }
  if !issetSampled{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Sampled is not set"));
  }
  if !issetBaggage{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Baggage is not set"));
  }
  return nil
}

func (p *ObservedSpan)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.TraceId = v
}
  return nil
}

func (p *ObservedSpan)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Sampled = v
}
  return nil
}

func (p *ObservedSpan)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Baggage = v
}
  return nil
}

func (p *ObservedSpan) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ObservedSpan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ObservedSpan) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("traceId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:traceId: ", p), err) }
  if err := oprot.WriteString(string(p.TraceId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.traceId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:traceId: ", p), err) }
  return err
}

func (p *ObservedSpan) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sampled", thrift.BOOL, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampled: ", p), err) }
  if err := oprot.WriteBool(bool(p.Sampled)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampled (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampled: ", p), err) }
  return err
}

func (p *ObservedSpan) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("baggage", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:baggage: ", p), err) }
  if err := oprot.WriteString(string(p.Baggage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.baggage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:baggage: ", p), err) }
  return err
}

func (p *ObservedSpan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ObservedSpan(%+v)", *p)
}

// Each server must include the information about the span it observed.
// It can only be omitted from the response if notImplementedError field is not empty.
// If the server was instructed to make a downstream call, it must embed the
// downstream response in its own response.
// 
// Attributes:
//  - Span
//  - Downstream
//  - NotImplementedError
type TraceResponse struct {
  Span *ObservedSpan `thrift:"span,1" db:"span" json:"span,omitempty"`
  Downstream *TraceResponse `thrift:"downstream,2" db:"downstream" json:"downstream,omitempty"`
  NotImplementedError string `thrift:"notImplementedError,3,required" db:"notImplementedError" json:"notImplementedError"`
}

func NewTraceResponse() *TraceResponse {
  return &TraceResponse{}
}

var TraceResponse_Span_DEFAULT *ObservedSpan
func (p *TraceResponse) GetSpan() *ObservedSpan {
  if !p.IsSetSpan() {
    return TraceResponse_Span_DEFAULT
  }
return p.Span
}
var TraceResponse_Downstream_DEFAULT *TraceResponse
func (p *TraceResponse) GetDownstream() *TraceResponse {
  if !p.IsSetDownstream() {
    return TraceResponse_Downstream_DEFAULT
  }
return p.Downstream
}

func (p *TraceResponse) GetNotImplementedError() string {
  return p.NotImplementedError
}
func (p *TraceResponse) IsSetSpan() bool {
  return p.Span != nil
}

func (p *TraceResponse) IsSetDownstream() bool {
  return p.Downstream != nil
}

func (p *TraceResponse) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }

  var issetNotImplementedError bool = false;

  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
        issetNotImplementedError = true
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  if !issetNotImplementedError{
    return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field NotImplementedError is not set"));
  }
  return nil
}

func (p *TraceResponse)  ReadField1(iprot thrift.TProtocol) error {
  p.Span = &ObservedSpan{}
  if err := p.Span.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Span), err)
  }
  return nil
}

func (p *TraceResponse)  ReadField2(iprot thrift.TProtocol) error {
  p.Downstream = &TraceResponse{}
  if err := p.Downstream.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Downstream), err)
  }
  return nil
}

func (p *TraceResponse)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.NotImplementedError = v
}
  return nil
}

func (p *TraceResponse) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("TraceResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TraceResponse) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetSpan() {
    if err := oprot.WriteFieldBegin("span", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:span: ", p), err) }
    if err := p.Span.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Span), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:span: ", p), err) }
  }
  return err
}

func (p *TraceResponse) writeField2(oprot thrift.TProtocol) (err error) {
  if p.IsSetDownstream() {
    if err := oprot.WriteFieldBegin("downstream", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:downstream: ", p), err) }
    if err := p.Downstream.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Downstream), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:downstream: ", p), err) }
  }
  return err
}

func (p *TraceResponse) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("notImplementedError", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:notImplementedError: ", p), err) }
  if err := oprot.WriteString(string(p.NotImplementedError)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.notImplementedError (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:notImplementedError: ", p), err) }
  return err
}

func (p *TraceResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TraceResponse(%+v)", *p)
}

type TracedService interface {
  // Parameters:
  //  - Request
  StartTrace(ctx context.Context, request *StartTraceRequest) (r *TraceResponse, err error)
  // Parameters:
  //  - Request
  JoinTrace(ctx context.Context, request *JoinTraceRequest) (r *TraceResponse, err error)
}

type TracedServiceClient struct {
  c thrift.TClient
}

func NewTracedServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *TracedServiceClient {
  return &TracedServiceClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

func NewTracedServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *TracedServiceClient {
  return &TracedServiceClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewTracedServiceClient(c thrift.TClient) *TracedServiceClient {
  return &TracedServiceClient{
    c: c,
  }
}

func (p *TracedServiceClient) Client_() thrift.TClient {
  return p.c
}
// Parameters:
//  - Request
func (p *TracedServiceClient) StartTrace(ctx context.Context, request *StartTraceRequest) (r *TraceResponse, err error) {
  var _args0 TracedServiceStartTraceArgs
  _args0.Request = request
  var _result1 TracedServiceStartTraceResult
  if err = p.Client_().Call(ctx, "startTrace", &_args0, &_result1); err != nil {
    return
  }
  return _result1.GetSuccess(), nil
}

// Parameters:
//  - Request
func (p *TracedServiceClient) JoinTrace(ctx context.Context, request *JoinTraceRequest) (r *TraceResponse, err error) {
  var _args2 TracedServiceJoinTraceArgs
  _args2.Request = request
  var _result3 TracedServiceJoinTraceResult
  if err = p.Client_().Call(ctx, "joinTrace", &_args2, &_result3); err != nil {
    return
  }
  return _result3.GetSuccess(), nil
}

type TracedServiceProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler TracedService
}

func (p *TracedServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *TracedServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *TracedServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewTracedServiceProcessor(handler TracedService) *TracedServiceProcessor {

  self4 := &TracedServiceProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self4.processorMap["startTrace"] = &tracedServiceProcessorStartTrace{handler:handler}
  self4.processorMap["joinTrace"] = &tracedServiceProcessorJoinTrace{handler:handler}
return self4
}

func (p *TracedServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x5 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x5.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush(ctx)
  return false, x5

}

type tracedServiceProcessorStartTrace struct {
  handler TracedService
}

func (p *tracedServiceProcessorStartTrace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TracedServiceStartTraceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("startTrace", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TracedServiceStartTraceResult{}
var retval *TraceResponse
  var err2 error
  if retval, err2 = p.handler.StartTrace(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing startTrace: " + err2.Error())
    oprot.WriteMessageBegin("startTrace", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("startTrace", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type tracedServiceProcessorJoinTrace struct {
  handler TracedService
}

func (p *tracedServiceProcessorJoinTrace) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := TracedServiceJoinTraceArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("joinTrace", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return false, err
  }

  iprot.ReadMessageEnd()
  result := TracedServiceJoinTraceResult{}
var retval *TraceResponse
  var err2 error
  if retval, err2 = p.handler.JoinTrace(ctx, args.Request); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing joinTrace: " + err2.Error())
    oprot.WriteMessageBegin("joinTrace", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush(ctx)
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("joinTrace", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - Request
type TracedServiceStartTraceArgs struct {
  Request *StartTraceRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTracedServiceStartTraceArgs() *TracedServiceStartTraceArgs {
  return &TracedServiceStartTraceArgs{}
}

var TracedServiceStartTraceArgs_Request_DEFAULT *StartTraceRequest
func (p *TracedServiceStartTraceArgs) GetRequest() *StartTraceRequest {
  if !p.IsSetRequest() {
    return TracedServiceStartTraceArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TracedServiceStartTraceArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TracedServiceStartTraceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TracedServiceStartTraceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &StartTraceRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TracedServiceStartTraceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startTrace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TracedServiceStartTraceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TracedServiceStartTraceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TracedServiceStartTraceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TracedServiceStartTraceResult struct {
  Success *TraceResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTracedServiceStartTraceResult() *TracedServiceStartTraceResult {
  return &TracedServiceStartTraceResult{}
}

var TracedServiceStartTraceResult_Success_DEFAULT *TraceResponse
func (p *TracedServiceStartTraceResult) GetSuccess() *TraceResponse {
  if !p.IsSetSuccess() {
    return TracedServiceStartTraceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TracedServiceStartTraceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TracedServiceStartTraceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TracedServiceStartTraceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TraceResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TracedServiceStartTraceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("startTrace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TracedServiceStartTraceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TracedServiceStartTraceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TracedServiceStartTraceResult(%+v)", *p)
}

// Attributes:
//  - Request
type TracedServiceJoinTraceArgs struct {
  Request *JoinTraceRequest `thrift:"request,1" db:"request" json:"request"`
}

func NewTracedServiceJoinTraceArgs() *TracedServiceJoinTraceArgs {
  return &TracedServiceJoinTraceArgs{}
}

var TracedServiceJoinTraceArgs_Request_DEFAULT *JoinTraceRequest
func (p *TracedServiceJoinTraceArgs) GetRequest() *JoinTraceRequest {
  if !p.IsSetRequest() {
    return TracedServiceJoinTraceArgs_Request_DEFAULT
  }
return p.Request
}
func (p *TracedServiceJoinTraceArgs) IsSetRequest() bool {
  return p.Request != nil
}

func (p *TracedServiceJoinTraceArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TracedServiceJoinTraceArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.Request = &JoinTraceRequest{}
  if err := p.Request.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Request), err)
  }
  return nil
}

func (p *TracedServiceJoinTraceArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("joinTrace_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TracedServiceJoinTraceArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("request", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:request: ", p), err) }
  if err := p.Request.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Request), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:request: ", p), err) }
  return err
}

func (p *TracedServiceJoinTraceArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TracedServiceJoinTraceArgs(%+v)", *p)
}

// Attributes:
//  - Success
type TracedServiceJoinTraceResult struct {
  Success *TraceResponse `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewTracedServiceJoinTraceResult() *TracedServiceJoinTraceResult {
  return &TracedServiceJoinTraceResult{}
}

var TracedServiceJoinTraceResult_Success_DEFAULT *TraceResponse
func (p *TracedServiceJoinTraceResult) GetSuccess() *TraceResponse {
  if !p.IsSetSuccess() {
    return TracedServiceJoinTraceResult_Success_DEFAULT
  }
return p.Success
}
func (p *TracedServiceJoinTraceResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *TracedServiceJoinTraceResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TracedServiceJoinTraceResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &TraceResponse{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *TracedServiceJoinTraceResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("joinTrace_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TracedServiceJoinTraceResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *TracedServiceJoinTraceResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TracedServiceJoinTraceResult(%+v)", *p)
}


