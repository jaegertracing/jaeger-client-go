// @generated Code generated by thrift-gen. Do not modify.

// Package zipkincore is generated code used to make or handle TChannel calls using Thrift.
package zipkincore

import (
	"fmt"

	athrift "github.com/apache/thrift/lib/go/thrift"
	"github.com/uber/tchannel-go/thrift"
)

// Interfaces for the service and client for the services defined in the IDL.

// TChanZipkinCollector is the interface that defines the server handler and client interface.
type TChanZipkinCollector interface {
	SubmitZipkinBatch(ctx thrift.Context, spans []*Span) ([]*Response, error)
}

// Implementation of a client and service handler.

type tchanZipkinCollectorClient struct {
	thriftService string
	client        thrift.TChanClient
}

func NewTChanZipkinCollectorInheritedClient(thriftService string, client thrift.TChanClient) *tchanZipkinCollectorClient {
	return &tchanZipkinCollectorClient{
		thriftService,
		client,
	}
}

// NewTChanZipkinCollectorClient creates a client that can be used to make remote calls.
func NewTChanZipkinCollectorClient(client thrift.TChanClient) TChanZipkinCollector {
	return NewTChanZipkinCollectorInheritedClient("ZipkinCollector", client)
}

func (c *tchanZipkinCollectorClient) SubmitZipkinBatch(ctx thrift.Context, spans []*Span) ([]*Response, error) {
	var resp ZipkinCollectorSubmitZipkinBatchResult
	args := ZipkinCollectorSubmitZipkinBatchArgs{
		Spans: spans,
	}
	success, err := c.client.Call(ctx, c.thriftService, "submitZipkinBatch", &args, &resp)
	if err == nil && !success {
	}

	return resp.GetSuccess(), err
}

type tchanZipkinCollectorServer struct {
	handler TChanZipkinCollector
}

// NewTChanZipkinCollectorServer wraps a handler for TChanZipkinCollector so it can be
// registered with a thrift.Server.
func NewTChanZipkinCollectorServer(handler TChanZipkinCollector) thrift.TChanServer {
	return &tchanZipkinCollectorServer{
		handler,
	}
}

func (s *tchanZipkinCollectorServer) Service() string {
	return "ZipkinCollector"
}

func (s *tchanZipkinCollectorServer) Methods() []string {
	return []string{
		"submitZipkinBatch",
	}
}

func (s *tchanZipkinCollectorServer) Handle(ctx thrift.Context, methodName string, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	switch methodName {
	case "submitZipkinBatch":
		return s.handleSubmitZipkinBatch(ctx, protocol)

	default:
		return false, nil, fmt.Errorf("method %v not found in service %v", methodName, s.Service())
	}
}

func (s *tchanZipkinCollectorServer) handleSubmitZipkinBatch(ctx thrift.Context, protocol athrift.TProtocol) (bool, athrift.TStruct, error) {
	var req ZipkinCollectorSubmitZipkinBatchArgs
	var res ZipkinCollectorSubmitZipkinBatchResult

	if err := req.Read(protocol); err != nil {
		return false, nil, err
	}

	r, err :=
		s.handler.SubmitZipkinBatch(ctx, req.Spans)

	if err != nil {
		return false, nil, err
	} else {
		res.Success = r
	}

	return err == nil, &res, nil
}
